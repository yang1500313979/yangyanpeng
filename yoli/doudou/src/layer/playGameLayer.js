/** * Created by Yoli */var PlayGameLayer = cc.Layer.extend({    aIcepool:null,    aEnemypool:null,    ctor:function (){        this._super();        this.Direction = Constant.DOWN;        this.aIcepool = [];        this.aEnemypool = [];        this.nIsOver = false;        this.HP = 3;        this.time = 120;        this.fInitUi();        this.fInitPlayer();        this.scheduleUpdate();        this.fTouchListener();        this.fInitEnemy();        this.schedule(this.ftime,1);        this.schedule(this.fAI2,.5);        return true;    },    ftime: function () {        if(this.time<=0){            //this.fGameOver();        }else{            this.time --;            var min = (this.time-this.time%60)/60;            if(min>9){                this.minlabel.setString(min.toString());            }else{                this.minlabel.setString("0"+min.toString());            }            var secd = (this.time%60);            if(secd>9){                this.secdlabel.setString(secd.toString());            }else{                this.secdlabel.setString("0"+secd.toString());            }        }    },    fTouchListener: function () {        var self = this;        cc.eventManager.addListener({            event: cc.EventListener.TOUCH_ONE_BY_ONE,            onTouchBegan:function(touch,event){                var xDist = touch.getLocationX()-100;                var yDist = touch.getLocationY()-100;                var spDist = xDist*xDist+yDist*yDist;                if(spDist<75*75){                    self._con.x = touch.getLocationX();                    self._con.y = touch.getLocationY();                    var x2 = touch.getLocationX();                    var y2 = touch.getLocationY();                    var x1 = 100;                    var y1 = 100;                    if(Math.abs(y2-y1)>Math.abs(x2-x1)){                        if(y2>100){                            self.Direction = Constant.UP;                        }else if(y2<=100){                            self.Direction = Constant.DOWN;                        }                    }else{                        if(x2>100){                            self.Direction = Constant.RIGHT;                        }else if(x2<=100){                            self.Direction = Constant.LEFT;                        }                    }                    return true;                }            },            onTouchMoved:function(touch,event){                var x2 = touch.getLocationX();                var y2 = touch.getLocationY();                var x1 = 100;                var y1 = 100;                var xDist = x2-x1;                var yDist = y2-y1;                var spDist = xDist*xDist+yDist*yDist;                if(spDist<75*75){                    self._con.x = touch.getLocationX();                    self._con.y = touch.getLocationY();                    if(Math.abs(y2-y1)>Math.abs(x2-x1)){                        if(y2>100){                            self.Direction = Constant.UP;                        }else if(y2<=100){                            self.Direction = Constant.DOWN;                        }                    }else{                        if(x2>100){                            self.Direction = Constant.RIGHT;                        }else if(x2<=100){                            self.Direction = Constant.LEFT;                        }                    }                }else{                    self._con.x = (70*xDist)/Math.sqrt(Math.pow(yDist,2)+Math.pow(xDist,2))+100;                    self._con.y = (70*yDist)/Math.sqrt(Math.pow(yDist,2)+Math.pow(xDist,2))+100;                    if(Math.abs(y2-y1)>Math.abs(x2-x1)){                        if(y2>100){                            self.Direction = Constant.UP;                        }else if(y2<=100){                            self.Direction = Constant.DOWN;                        }                    }else{                        if(x2>100){                            self.Direction = Constant.RIGHT;                        }else if(x2<=100){                            self.Direction = Constant.LEFT;                        }                    }                }            },            onTouchEnded:function(touch,event){                self._con.x = 100;                self._con.y = 100;                self.Direction = null;            }        },this);    },    fInitUi: function () {        var _bg = new cc.Sprite("#bg.png");        _bg.setPosition(240,400);        _bg.setAnchorPoint(.5,.5);        this.addChild(_bg);        var _conbg = new cc.Sprite("res/conbg.png");        _conbg.setPosition(100,100);        _conbg.setAnchorPoint(.5,.5);        this.addChild(_conbg,22);        this._con = new cc.Sprite("res/con.png");        this._con.setPosition(100,100);        this._con.setAnchorPoint(.5,.5);        this.addChild(this._con,22);        this.fInitTitle();        this.fInitIce();    },    fInitTitle: function () {        var timebg = new cc.Sprite("res/timer.png");        timebg.setPosition(360,750);        this.addChild(timebg,2);        var hearts = new cc.Sprite("res/hearts.png");        hearts.setPosition(120,750);        this.addChild(hearts,2);        this.heart1 = new cc.Sprite("res/heart.png");        this.heart1.setPosition(55,750);        this.addChild(this.heart1,3);        this.heart2 = new cc.Sprite("res/heart.png");        this.heart2.setPosition(120,750);        this.addChild(this.heart2,3);        this.heart3 = new cc.Sprite("res/heart.png");        this.heart3.setPosition(185,750);        this.addChild(this.heart3,3);        this.minlabel = new cc.LabelAtlas("02", res.Num_png, 24.6, 45, "0");        this.minlabel.setAnchorPoint(.5,.5);        this.minlabel.setPosition(360,750);        this.addChild(this.minlabel,24);        this.secdlabel = new cc.LabelAtlas("00", res.Num_png, 24.6, 45, "0");        this.secdlabel.setAnchorPoint(.5,.5);        this.secdlabel.setPosition(420,750);        this.addChild(this.secdlabel,24);    },    fInitPlayer: function () {        this._player = flax.assetsManager.createDisplay(res.Anim_plist,"player",{parent:this});        this._player.play();        this._player.setAnchorPoint(.5,.5);        this._player.setPosition(Constant.BIRD_WIDHT*(3/2)+2,650);        this._player.setRotation(-90);        this._player.setScale(.6);        this._player.runAction(cc.moveBy(8,cc.p(0,-800)));        this._player._status = this.Direction;        this._player.ChangeStatus = function(status){            if(status == Constant.STOP){                this._player.stopAllActions();                this._player._status = Constant.STOP;            }            if(status == Constant.RIGHT){                this._player.stopAllActions();                this._player.setRotation(0);                this._player.setScaleX(.6);                this._player.setScaleX(-.6);                this._player.runAction(cc.moveBy(8,cc.p(800,0)));                this._player._status = Constant.RIGHT;            }            if(status == Constant.LEFT){                this._player.stopAllActions();                this._player.setRotation(0);                this._player.setScaleX(.6);                this._player.runAction(cc.moveBy(8,cc.p(-800,0)));                this._player._status = Constant.LEFT;            }            if(status == Constant.UP){                this._player.stopAllActions();                this._player.setRotation(0);                this._player.setScaleX(.6);                this._player.setScaleX(-.6);                this._player.setRotation(-90);                this._player.runAction(cc.moveBy(8,cc.p(0,800)));                this._player._status = Constant.UP;            }            if(status == Constant.DOWN){                this._player.stopAllActions();                this._player.setRotation(0);                this._player.setScaleX(.6);                this._player.setRotation(-90);                this._player.runAction(cc.moveBy(8,cc.p(0,-800)));                this._player._status = Constant.DOWN;            }        }.bind(this)    },    fInitEnemy: function () {        for(var i = 0;i<4;i++){            var a = new Base(i,Constant.STOP,Constant.ENEMY[i].x,Constant.ENEMY[i].y,8);            this.addChild(a,23);            a.x = Constant.BIRD_WIDHT * a._col+Constant.BIRD_WIDHT/2;            a.y = (Constant.BIRD_HEIGH) * a._row+Constant.BIRD_HEIGH/2 ;            a.ChangeStatus(Constant.RIGHT);            this.aEnemypool.push(a);        }    },    update: function (dt) {        if(!this.nIsOver){            this.fCollsionWithIce(this._player);            this.fCollsionWithCoin();            this.fContrlPlayer(this._player);            for(var i in this.aEnemypool){                this.fEnemyAi(this.aEnemypool[i]);            }            this.fCollsionWithEnemy();            if(this.isWin()){                this.GameOver();            }            if(this.HP==2){                this.heart3.setVisible(false);            }            if(this.HP==1){                this.heart2.setVisible(false);            }            if(this.HP == 0){                this.heart1.setVisible(false);            }            if(this.HP<0){                this.GameOver2();            }        }    },    fInitIce: function () {        this.aIcepool.length = 0;        var map = Constant.aLevels[Variables.level];        for (var col = 0; col < Constant.MAP_WIDHT; col++) {            var _row = [];            for (var row = 0; row < Constant.MAP_HEIGH; row++) {                if(map[row][col] == 0){                    var _ice = new cc.Sprite("res/ice.png");                    _ice.setAnchorPoint(cc.p(.5, .5));                    _ice.setLocalZOrder(9);                    _ice.x = Constant.BIRD_WIDHT * col+Constant.BIRD_WIDHT/2;                    _ice.y = (Constant.BIRD_HEIGH) * row+Constant.BIRD_HEIGH/2 ;                    _ice.setVisible(false);                    _ice.Type = 0;                    this.addChild(_ice);                    _row.push(_ice);                }                if(map[row][col] == 1){                    var _ice = new cc.Sprite("res/ice.png");                    _ice.setAnchorPoint(cc.p(.5, .5));                    _ice.setLocalZOrder(9);                    _ice.x = Constant.BIRD_WIDHT * col+Constant.BIRD_WIDHT/2;                    _ice.y = (Constant.BIRD_HEIGH) * row+Constant.BIRD_HEIGH/2 ;                    _ice.Type = 1;                    this.addChild(_ice);                    _row.push(_ice);                }                if(map[row][col] == 2){                    var _ice = new cc.Sprite("res/coin.png");                    _ice.setAnchorPoint(cc.p(.5, .5));                    _ice.setLocalZOrder(9);                    _ice.x = Constant.BIRD_WIDHT * col+Constant.BIRD_WIDHT/2;                    _ice.y = (Constant.BIRD_HEIGH) * row+Constant.BIRD_HEIGH/2 ;                    _ice.Type = 2;                    this.addChild(_ice);                    _row.push(_ice);                }            }            this.aIcepool.push(_row);        }    },    //判断移动    fContrlPlayer: function (sprite) {        if(this.Direction){            var _col = Math.floor((sprite.x) / Constant.BIRD_WIDHT);            var _row = Math.floor((sprite.y) / Constant.BIRD_HEIGH);            if(this.Direction == Constant.UP&&                sprite._status!=Constant.UP&&                this.aIcepool[_col][_row+1].Type!=1&&                Math.abs(sprite.x-this.aIcepool[_col][_row+1].x)<10            ){                sprite.x = this.aIcepool[_col][_row+1].x;                sprite.ChangeStatus(Constant.UP);            }            if(this.Direction == Constant.DOWN&&                sprite._status!=Constant.DOWN&&                this.aIcepool[_col][_row-1].Type!=1&&                Math.abs(sprite.x-this.aIcepool[_col][_row-1].x)<10            ){                sprite.x = this.aIcepool[_col][_row-1].x;                sprite.ChangeStatus(Constant.DOWN);            }            if(this.Direction == Constant.RIGHT&&                sprite._status!=Constant.RIGHT&&                this.aIcepool[_col+1][_row].Type!=1&&                Math.abs(sprite.y-this.aIcepool[_col+1][_row].y)<10            ){                sprite.y = this.aIcepool[_col+1][_row].y;                sprite.ChangeStatus(Constant.RIGHT);            }            if(this.Direction == Constant.LEFT&&                sprite._status!=Constant.LEFT&&                this.aIcepool[_col-1][_row].Type!=1&&                Math.abs(sprite.y-this.aIcepool[_col-1][_row].y)<10            ){                sprite.y = this.aIcepool[_col-1][_row].y;                sprite.ChangeStatus(Constant.LEFT);            }        }    },    fCollsionWithIce: function (sprite) {        var _col = Math.floor((sprite.x) / Constant.BIRD_WIDHT);        var _row = Math.floor((sprite.y) / Constant.BIRD_HEIGH);        if(sprite._status==Constant.DOWN){            if(this.aIcepool[_col][_row-1].Type==1){                var yDist = Math.abs(sprite.y-this.aIcepool[_col][_row-1].y);                if(yDist< (sprite.getBoundingBox().height/2+Constant.BIRD_HEIGH/2)){                    sprite.ChangeStatus(Constant.STOP);                }            }        }        if(sprite._status==Constant.UP){            if(this.aIcepool[_col][_row+1].Type==1){                var yDist = Math.abs(sprite.y-this.aIcepool[_col][_row+1].y);                if(yDist< (sprite.getBoundingBox().height/2+Constant.BIRD_HEIGH/2)){                    sprite.ChangeStatus(Constant.STOP);                }            }        }        if(sprite._status==Constant.LEFT){            if(this.aIcepool[_col-1][_row].Type==1){                var xDist = Math.abs(sprite.x-this.aIcepool[_col-1][_row].x);                if(xDist< (sprite.getBoundingBox().width/2+Constant.BIRD_WIDHT/2)){                    sprite.ChangeStatus(Constant.STOP);                }            }        }        if(sprite._status==Constant.RIGHT){            if(this.aIcepool[_col+1][_row].Type==1){                var xDist = Math.abs(sprite.x-this.aIcepool[_col+1][_row].x);                if(xDist< (sprite.getBoundingBox().width/2+Constant.BIRD_WIDHT/2)){                    sprite.ChangeStatus(Constant.STOP);                }            }        }    },    fCollsionWithCoin: function () {        var _col = Math.floor((this._player.x) / Constant.BIRD_WIDHT);        var _row = Math.floor((this._player.y) / Constant.BIRD_HEIGH);        if(this.aIcepool[_col][_row].Type==2&&this.aIcepool[_col][_row].visible==true){            this.aIcepool[_col][_row].visible = false;        }    },    fCollsionWithEnemy: function () {        if(fCirAndCirCollision(this.aEnemypool,this._player)){            this.HP--;            this._player.setPosition(Constant.BIRD_WIDHT*(3/2)+2,650);            for(var i in this.aEnemypool){                var a = this.aEnemypool[i];                a.x = Constant.BIRD_WIDHT * a._col+Constant.BIRD_WIDHT/2;                a.y = (Constant.BIRD_HEIGH) * a._row+Constant.BIRD_HEIGH/2 ;            }        }    },    fEnemyAi: function (enemy) {        var _col1 = Math.floor((enemy.x) / Constant.BIRD_WIDHT);        var _row1 = Math.floor((enemy.y) / Constant.BIRD_HEIGH);        var _col2 = Math.floor((this._player.x) / Constant.BIRD_WIDHT);        var _row2 = Math.floor((this._player.y) / Constant.BIRD_HEIGH);        this.fCollsionWithIce(enemy);        //this.fBbbbb(enemy);        if(enemy._status == Constant.STOP){            var dirpool = this.fAaaa(_col1,_row1);            var a = parseInt(Math.random()*(dirpool.length));            enemy.ChangeStatus(dirpool[a]);        }else{        }    },    fAaaa: function (col,row) {        var dirpool = [];        if(this.aIcepool[col][row+1].Type!=1){            var aa = Constant.UP;            dirpool.push(aa)        }        if(this.aIcepool[col][row-1].Type!=1){            var aa = Constant.DOWN;            dirpool.push(aa)        }        if(this.aIcepool[col-1][row].Type!=1){            var aa = Constant.LEFT;            dirpool.push(aa)        }        if(this.aIcepool[col+1][row].Type!=1){            var aa = Constant.RIGHT;            dirpool.push(aa)        }        return dirpool;    },    fBbbbb: function (sprite) {        var _col = Math.floor((sprite.x) / Constant.BIRD_WIDHT);        var _row = Math.floor((sprite.y) / Constant.BIRD_HEIGH);        if(sprite._status==Constant.DOWN){            if(_col==Constant.POINT[1].col&&_row==Constant.POINT[1].row){                var yDist = Math.abs(sprite.y-this.aIcepool[_col][_row-1].y);                if(yDist< (sprite.getBoundingBox().height/2+Constant.BIRD_HEIGH/2)){                    sprite.ChangeStatus(Constant.STOP);                }            }        }        if(sprite._status==Constant.UP){            if(_col==Constant.POINT[0].col&&_row==Constant.POINT[0].row){                var yDist = Math.abs(sprite.y-this.aIcepool[_col][_row+1].y);                if(yDist< (sprite.getBoundingBox().height/2+Constant.BIRD_HEIGH/2)){                    sprite.ChangeStatus(Constant.STOP);                }            }        }        if(sprite._status==Constant.LEFT){            if(_col==Constant.POINT[Constant.LEFT].col&&_row==Constant.POINT[Constant.LEFT].row){                var yDist = Math.abs(sprite.x-this.aIcepool[_col-1][_row].x);                if(yDist< (sprite.getBoundingBox().height/2+Constant.BIRD_HEIGH/2)){                    sprite.ChangeStatus(Constant.STOP);                }            }        }        if(sprite._status==Constant.RIGHT){            if(_col==Constant.POINT[Constant.RIGHT].col&&_row==Constant.POINT[Constant.RIGHT].row){                var yDist = Math.abs(sprite.x-this.aIcepool[_col+1][_row].x);                if(yDist< (sprite.getBoundingBox().height/2+Constant.BIRD_HEIGH/2)){                    sprite.ChangeStatus(Constant.STOP);                }            }        }    },    isWin: function () {        for(var i =0;i<13;i++){            for(var j = 0;j<20;j++){                if(this.aIcepool[i][j].Type == 2&&                    this.aIcepool[i][j].visible==true){                        return false;                }            }        }        return true;    },    fAI2: function () {        for(var i in this.aEnemypool){            var enemy = this.aEnemypool[i];            var _col1 = Math.floor((enemy.x) / Constant.BIRD_WIDHT);            var _row1 = Math.floor((enemy.y) / Constant.BIRD_HEIGH);            var _col2 = Math.floor((this._player.x) / Constant.BIRD_WIDHT);            var _row2 = Math.floor((this._player.y) / Constant.BIRD_HEIGH);            //怪物和玩家在同一列            if(_col1 == _col2){                //玩家在怪物下方                if(_row1>_row2){                    if(this.aIcepool[_col1][_row1-1]._type!=0){                        if(Math.abs(enemy.x-(_col1* Constant.BIRD_WIDHT+Constant.BIRD_WIDHT/2))<10){                            enemy.x=_col1* Constant.BIRD_WIDHT+Constant.BIRD_WIDHT/2;                            enemy.ChangeStatus(Constant.DOWN);                        }                    }                }else{                    if(this.aIcepool[_col1][_row1-1]._type!=0){                        if(Math.abs(enemy.x-(_col1* Constant.BIRD_WIDHT+Constant.BIRD_WIDHT/2))<10){                            enemy.x=_col1* Constant.BIRD_WIDHT+Constant.BIRD_WIDHT/2;                            enemy.ChangeStatus(Constant.UP);                        }                    }                }            }            //怪物和玩家在同一行            if(_row1 == _row2){                //玩家在怪物左方                if(_col1 >_col2){                    if(this.aIcepool[_col1-1][_row1]._type!=0){                        if(Math.abs(enemy.y-_row1* Constant.BIRD_HEIGH-Constant.BIRD_HEIGH/2)<10){                            enemy.y=_row1* Constant.BIRD_HEIGH+Constant.BIRD_HEIGH/2;                            enemy.ChangeStatus(Constant.LEFT);                        }                    }                }else{                    if(this.aIcepool[_col1+1][_row1]._type!=0){                        if(Math.abs(enemy.y-_row1* Constant.BIRD_HEIGH-Constant.BIRD_HEIGH/2)<10){                            enemy.y=_row1* Constant.BIRD_HEIGH+Constant.BIRD_HEIGH/2;                            enemy.ChangeStatus(Constant.RIGHT);                        }                    }                }            }        }    },    GameOver: function () {        cc.director.pause();        this.nIsOver = true;        this.aEnemypool.length = 0;        this.aIcepool.length = 0;        this.unschedule();        var _endlayer = new WinGameLayer();        this.addChild(_endlayer,66);    },    GameOver2: function () {        cc.director.pause();        this.nIsOver = true;        this.aEnemypool.length = 0;        this.aIcepool.length = 0;        this.unschedule();        var _endlayer = new DefeatGameLayer();        this.addChild(_endlayer,66);    },    Astar: function (start,goal) {        var cur = null;        var open = [];        var close = [];        //var goal = cc.p(1,18);        //var start = cc.p(5,11);        open.push(start);        cur = start;       while(!this.poinIsInArray(goal,open)){            var array = this.fValues(cur.x,cur.y,open,close);            var is = false;            for(var i in array ){                open.push(array[i]);                array[i].fa = cur;            }            open.splice(open.indexOf(cur),1);            close.push(cur);            if(array.length>0){                cur = array[this.minVal(array,start,goal)];            }else {                cur = open[this.minVal(open,start,goal)];            }            array.length =0;        }        var setp = [] ;        while(cur.x != start.x||                cur.y != start.y            ){            var x = cur;            setp.push(x);            cur = cur.fa;        }        for(var i = setp.length-1;i>0;i--){            cc.log(setp[i].x+":"+setp[i].y);        }        return setp;    },    GH: function (point,start,goal) {        var G = Math.abs(start.x-point.x)+Math.abs(start.y-point.y);        var H = Math.abs(goal.x-point.x)+Math.abs(goal.y-point.y);        return G+H;    },    fValues: function (col,row,open,close) {        var dirpool = [];        if(this.aIcepool[col][row+1].Type!=1&&            !this.poinIsInArray(cc.p(col,row+1),open)&&            !this.poinIsInArray(cc.p(col,row+1),close)        ){            dirpool.push(cc.p(col,row+1))        }        if(this.aIcepool[col][row-1].Type!=1&&            !this.poinIsInArray(cc.p(col,row-1),open)&&            !this.poinIsInArray(cc.p(col,row-1),close)        ){            dirpool.push(cc.p(col,row-1))        }        if(this.aIcepool[col-1][row].Type!=1&&            !this.poinIsInArray(cc.p(col-1,row),open)&&            !this.poinIsInArray(cc.p(col-1,row),close)        ){            dirpool.push(cc.p(col-1,row))        }        if(this.aIcepool[col+1][row].Type!=1&&            !this.poinIsInArray(cc.p(col+1,row),open)&&            !this.poinIsInArray(cc.p(col+1,row),close)        ){             dirpool.push(cc.p(col+1,row))        }        return dirpool;    },    minVal: function (array,start,goal) {        var min = 200000 ;        var num ;        for(var i in array){            if(this.GH(cc.p(array[i].x,array[i].y),start,goal)<min){                min = this.GH(cc.p(array[i].x,array[i].y),start,goal);                num = i;            }        }        return num;    },    poinIsInArray: function (point,array) {        for(var i in array){            if(array[i].x == point.x&&                array[i].y == point.y            ){                return true;            }        }        return false;    }});